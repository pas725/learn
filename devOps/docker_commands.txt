


	DOCKER COMMANDS :
	-------------------------------------

		1. Remove docker image
			- docker rmi <imagename/id>

		2. List running containers
			- docker ps [Optional -a]

			STOP container
			- docker stop <name / list of container Ids separated by space>

			REMOVE containers
			- docker rm <name / list of container Ids separated by space>

		3. Build image from dockerfile (Dockerfile needs to be in current path)
			- sudo docker build -t <image-name> .

		4. Connect to Postgres DB non-interactively & execute query
			- PGPASSWORD=postgres psql -h localhost -p 49678 -d sf-connector -U postgres -c "SELECT tablename FROM pg_tables WHERE schemaname='public' ORDER BY tablename"

		5. Run a container  
			- docker run -d --name test debian:latest
				This example runs a container named test using the debian:latest image. 

			Options :
			- [-d] : run container in backgound , detached mode
			- [--name] Provide name to container, instead of assigning random image-name
			- [-p] : Specify port mapping

		6. Entering into Running Docker container
			- docker exec -it [container-id] bash

		7. View logs of running Docker container
			- docker logs [container-id]

		8. VOLUMES : Mount volume into container from host machine
			- docker run -it -v /tmp{Host machine path}:/tmp{inside container} ubuntu bash

			There are 2 ways to mount volumes
				- Sharing data between Host and container
				- Creating Data-container & use this container as storage in other containers
					eg : 1. create data container
							* docker create -v /tmp --name datacontainer ubuntu
						 2. Create new container and mount volume from data container
						 	* docker run -t -i --volumes-from datacontainer ubuntu /bin/bash


		9. Delete dangling images
			$ docker rmi $(docker images -q -f dangling=true)

		10. Kill all running containers
			$ docker kill $(docker ps -q)

		11. Remove all stopped containers
			$ docker rm $(docker ps -a -q)
			